
TIMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010bc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800117c  0800117c  0001117c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080011ac  080011ac  000111ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080011b0  080011b0  000111b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080011b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000060  20000004  080011b8  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000064  080011b8  00020064  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d46b  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001ada  00000000  00000000  0002d497  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005577  00000000  00000000  0002ef71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000648  00000000  00000000  000344e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000978  00000000  00000000  00034b30  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000039f4  00000000  00000000  000354a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000027ed  00000000  00000000  00038e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003b689  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000131c  00000000  00000000  0003b708  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001164 	.word	0x08001164

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001164 	.word	0x08001164

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000220:	b510      	push	{r4, lr}
 8000222:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000224:	f000 fc06 	bl	8000a34 <HAL_RCC_GetHCLKFreq>
 8000228:	21fa      	movs	r1, #250	; 0xfa
 800022a:	0089      	lsls	r1, r1, #2
 800022c:	f7ff ff6c 	bl	8000108 <__udivsi3>
 8000230:	f000 f860 	bl	80002f4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000234:	2001      	movs	r0, #1
 8000236:	2200      	movs	r2, #0
 8000238:	0021      	movs	r1, r4
 800023a:	4240      	negs	r0, r0
 800023c:	f000 f820 	bl	8000280 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000240:	2000      	movs	r0, #0
 8000242:	bd10      	pop	{r4, pc}

08000244 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000244:	2310      	movs	r3, #16
 8000246:	4a06      	ldr	r2, [pc, #24]	; (8000260 <HAL_Init+0x1c>)
{
 8000248:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800024a:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800024c:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800024e:	430b      	orrs	r3, r1
 8000250:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000252:	f7ff ffe5 	bl	8000220 <HAL_InitTick>
  HAL_MspInit();
 8000256:	f000 fea9 	bl	8000fac <HAL_MspInit>
}
 800025a:	2000      	movs	r0, #0
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	40022000 	.word	0x40022000

08000264 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000264:	4a02      	ldr	r2, [pc, #8]	; (8000270 <HAL_IncTick+0xc>)
 8000266:	6813      	ldr	r3, [r2, #0]
 8000268:	3301      	adds	r3, #1
 800026a:	6013      	str	r3, [r2, #0]
}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	20000020 	.word	0x20000020

08000274 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000274:	4b01      	ldr	r3, [pc, #4]	; (800027c <HAL_GetTick+0x8>)
 8000276:	6818      	ldr	r0, [r3, #0]
}
 8000278:	4770      	bx	lr
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	20000020 	.word	0x20000020

08000280 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000284:	2800      	cmp	r0, #0
 8000286:	da14      	bge.n	80002b2 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000288:	230f      	movs	r3, #15
 800028a:	b2c0      	uxtb	r0, r0
 800028c:	4003      	ands	r3, r0
 800028e:	3b08      	subs	r3, #8
 8000290:	4a11      	ldr	r2, [pc, #68]	; (80002d8 <HAL_NVIC_SetPriority+0x58>)
 8000292:	089b      	lsrs	r3, r3, #2
 8000294:	009b      	lsls	r3, r3, #2
 8000296:	189b      	adds	r3, r3, r2
 8000298:	2203      	movs	r2, #3
 800029a:	4010      	ands	r0, r2
 800029c:	4090      	lsls	r0, r2
 800029e:	32fc      	adds	r2, #252	; 0xfc
 80002a0:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002a2:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002a6:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a8:	69dc      	ldr	r4, [r3, #28]
 80002aa:	43ac      	bics	r4, r5
 80002ac:	4321      	orrs	r1, r4
 80002ae:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80002b0:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b2:	2503      	movs	r5, #3
 80002b4:	0883      	lsrs	r3, r0, #2
 80002b6:	4028      	ands	r0, r5
 80002b8:	40a8      	lsls	r0, r5
 80002ba:	35fc      	adds	r5, #252	; 0xfc
 80002bc:	002e      	movs	r6, r5
 80002be:	4a07      	ldr	r2, [pc, #28]	; (80002dc <HAL_NVIC_SetPriority+0x5c>)
 80002c0:	009b      	lsls	r3, r3, #2
 80002c2:	189b      	adds	r3, r3, r2
 80002c4:	22c0      	movs	r2, #192	; 0xc0
 80002c6:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002c8:	4029      	ands	r1, r5
 80002ca:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002cc:	0092      	lsls	r2, r2, #2
 80002ce:	589c      	ldr	r4, [r3, r2]
 80002d0:	43b4      	bics	r4, r6
 80002d2:	4321      	orrs	r1, r4
 80002d4:	5099      	str	r1, [r3, r2]
 80002d6:	e7eb      	b.n	80002b0 <HAL_NVIC_SetPriority+0x30>
 80002d8:	e000ed00 	.word	0xe000ed00
 80002dc:	e000e100 	.word	0xe000e100

080002e0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002e0:	231f      	movs	r3, #31
 80002e2:	4018      	ands	r0, r3
 80002e4:	3b1e      	subs	r3, #30
 80002e6:	4083      	lsls	r3, r0
 80002e8:	4a01      	ldr	r2, [pc, #4]	; (80002f0 <HAL_NVIC_EnableIRQ+0x10>)
 80002ea:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80002ec:	4770      	bx	lr
 80002ee:	46c0      	nop			; (mov r8, r8)
 80002f0:	e000e100 	.word	0xe000e100

080002f4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002f4:	4a09      	ldr	r2, [pc, #36]	; (800031c <HAL_SYSTICK_Config+0x28>)
 80002f6:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 80002f8:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d80d      	bhi.n	800031a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002fe:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000300:	4a07      	ldr	r2, [pc, #28]	; (8000320 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000302:	4808      	ldr	r0, [pc, #32]	; (8000324 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000304:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000306:	6a03      	ldr	r3, [r0, #32]
 8000308:	0609      	lsls	r1, r1, #24
 800030a:	021b      	lsls	r3, r3, #8
 800030c:	0a1b      	lsrs	r3, r3, #8
 800030e:	430b      	orrs	r3, r1
 8000310:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000312:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000314:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000316:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000318:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800031a:	4770      	bx	lr
 800031c:	00ffffff 	.word	0x00ffffff
 8000320:	e000e010 	.word	0xe000e010
 8000324:	e000ed00 	.word	0xe000ed00

08000328 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000328:	4b05      	ldr	r3, [pc, #20]	; (8000340 <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800032a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800032c:	2804      	cmp	r0, #4
 800032e:	d102      	bne.n	8000336 <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000330:	4310      	orrs	r0, r2
 8000332:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000334:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000336:	2104      	movs	r1, #4
 8000338:	438a      	bics	r2, r1
 800033a:	601a      	str	r2, [r3, #0]
}
 800033c:	e7fa      	b.n	8000334 <HAL_SYSTICK_CLKSourceConfig+0xc>
 800033e:	46c0      	nop			; (mov r8, r8)
 8000340:	e000e010 	.word	0xe000e010

08000344 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000344:	4770      	bx	lr

08000346 <HAL_SYSTICK_IRQHandler>:
{
 8000346:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8000348:	f7ff fffc 	bl	8000344 <HAL_SYSTICK_Callback>
}
 800034c:	bd10      	pop	{r4, pc}
	...

08000350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000350:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000352:	680b      	ldr	r3, [r1, #0]
{ 
 8000354:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000356:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8000358:	2300      	movs	r3, #0
{ 
 800035a:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800035c:	9a02      	ldr	r2, [sp, #8]
 800035e:	40da      	lsrs	r2, r3
 8000360:	d101      	bne.n	8000366 <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 8000362:	b007      	add	sp, #28
 8000364:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000366:	2201      	movs	r2, #1
 8000368:	409a      	lsls	r2, r3
 800036a:	9203      	str	r2, [sp, #12]
 800036c:	9903      	ldr	r1, [sp, #12]
 800036e:	9a02      	ldr	r2, [sp, #8]
 8000370:	400a      	ands	r2, r1
 8000372:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8000374:	d100      	bne.n	8000378 <HAL_GPIO_Init+0x28>
 8000376:	e08c      	b.n	8000492 <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000378:	9a01      	ldr	r2, [sp, #4]
 800037a:	2110      	movs	r1, #16
 800037c:	6852      	ldr	r2, [r2, #4]
 800037e:	0016      	movs	r6, r2
 8000380:	438e      	bics	r6, r1
 8000382:	2e02      	cmp	r6, #2
 8000384:	d10e      	bne.n	80003a4 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000386:	2507      	movs	r5, #7
 8000388:	401d      	ands	r5, r3
 800038a:	00ad      	lsls	r5, r5, #2
 800038c:	3901      	subs	r1, #1
 800038e:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 8000390:	08dc      	lsrs	r4, r3, #3
 8000392:	00a4      	lsls	r4, r4, #2
 8000394:	1904      	adds	r4, r0, r4
 8000396:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000398:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 800039a:	9901      	ldr	r1, [sp, #4]
 800039c:	6909      	ldr	r1, [r1, #16]
 800039e:	40a9      	lsls	r1, r5
 80003a0:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 80003a2:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80003a4:	2403      	movs	r4, #3
 80003a6:	005f      	lsls	r7, r3, #1
 80003a8:	40bc      	lsls	r4, r7
 80003aa:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80003ac:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003ae:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80003b0:	4025      	ands	r5, r4
 80003b2:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003b4:	2503      	movs	r5, #3
 80003b6:	4015      	ands	r5, r2
 80003b8:	40bd      	lsls	r5, r7
 80003ba:	4661      	mov	r1, ip
 80003bc:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 80003be:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003c0:	2e01      	cmp	r6, #1
 80003c2:	d80f      	bhi.n	80003e4 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003c4:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 80003c6:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003c8:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003ca:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003cc:	40bd      	lsls	r5, r7
 80003ce:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80003d0:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80003d2:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003d4:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003d6:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003d8:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003da:	2101      	movs	r1, #1
 80003dc:	400d      	ands	r5, r1
 80003de:	409d      	lsls	r5, r3
 80003e0:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80003e2:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 80003e4:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003e6:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003e8:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003ea:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003ec:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003ee:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003f0:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003f2:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80003f4:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003f6:	420a      	tst	r2, r1
 80003f8:	d04b      	beq.n	8000492 <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003fa:	2101      	movs	r1, #1
 80003fc:	4c26      	ldr	r4, [pc, #152]	; (8000498 <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003fe:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000400:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000402:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000404:	430d      	orrs	r5, r1
 8000406:	61a5      	str	r5, [r4, #24]
 8000408:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 800040a:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800040c:	400c      	ands	r4, r1
 800040e:	9405      	str	r4, [sp, #20]
 8000410:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000412:	240f      	movs	r4, #15
 8000414:	4921      	ldr	r1, [pc, #132]	; (800049c <HAL_GPIO_Init+0x14c>)
 8000416:	00ad      	lsls	r5, r5, #2
 8000418:	00b6      	lsls	r6, r6, #2
 800041a:	186d      	adds	r5, r5, r1
 800041c:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800041e:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 8000420:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000422:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000424:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000426:	2400      	movs	r4, #0
 8000428:	4288      	cmp	r0, r1
 800042a:	d00c      	beq.n	8000446 <HAL_GPIO_Init+0xf6>
 800042c:	491c      	ldr	r1, [pc, #112]	; (80004a0 <HAL_GPIO_Init+0x150>)
 800042e:	3401      	adds	r4, #1
 8000430:	4288      	cmp	r0, r1
 8000432:	d008      	beq.n	8000446 <HAL_GPIO_Init+0xf6>
 8000434:	491b      	ldr	r1, [pc, #108]	; (80004a4 <HAL_GPIO_Init+0x154>)
 8000436:	3401      	adds	r4, #1
 8000438:	4288      	cmp	r0, r1
 800043a:	d004      	beq.n	8000446 <HAL_GPIO_Init+0xf6>
 800043c:	491a      	ldr	r1, [pc, #104]	; (80004a8 <HAL_GPIO_Init+0x158>)
 800043e:	3403      	adds	r4, #3
 8000440:	4288      	cmp	r0, r1
 8000442:	d100      	bne.n	8000446 <HAL_GPIO_Init+0xf6>
 8000444:	3c02      	subs	r4, #2
 8000446:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000448:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800044a:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 800044c:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 800044e:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8000450:	4c16      	ldr	r4, [pc, #88]	; (80004ac <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000452:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8000454:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 8000456:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000458:	03d1      	lsls	r1, r2, #15
 800045a:	d401      	bmi.n	8000460 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800045c:	003e      	movs	r6, r7
 800045e:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8000460:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8000462:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 8000464:	9e00      	ldr	r6, [sp, #0]
 8000466:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000468:	0391      	lsls	r1, r2, #14
 800046a:	d401      	bmi.n	8000470 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800046c:	003e      	movs	r6, r7
 800046e:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8000470:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8000472:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 8000474:	9e00      	ldr	r6, [sp, #0]
 8000476:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000478:	02d1      	lsls	r1, r2, #11
 800047a:	d401      	bmi.n	8000480 <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800047c:	003e      	movs	r6, r7
 800047e:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8000480:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8000482:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 8000484:	9f00      	ldr	r7, [sp, #0]
 8000486:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000488:	0292      	lsls	r2, r2, #10
 800048a:	d401      	bmi.n	8000490 <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800048c:	402e      	ands	r6, r5
 800048e:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8000490:	60e7      	str	r7, [r4, #12]
    position++;
 8000492:	3301      	adds	r3, #1
 8000494:	e762      	b.n	800035c <HAL_GPIO_Init+0xc>
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	40021000 	.word	0x40021000
 800049c:	40010000 	.word	0x40010000
 80004a0:	48000400 	.word	0x48000400
 80004a4:	48000800 	.word	0x48000800
 80004a8:	48000c00 	.word	0x48000c00
 80004ac:	40010400 	.word	0x40010400

080004b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	d001      	beq.n	80004b8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004b4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80004b6:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004b8:	6281      	str	r1, [r0, #40]	; 0x28
}
 80004ba:	e7fc      	b.n	80004b6 <HAL_GPIO_WritePin+0x6>

080004bc <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80004bc:	6943      	ldr	r3, [r0, #20]
 80004be:	4059      	eors	r1, r3
 80004c0:	6141      	str	r1, [r0, #20]
}
 80004c2:	4770      	bx	lr

080004c4 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 80004c4:	4770      	bx	lr
	...

080004c8 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80004c8:	4b04      	ldr	r3, [pc, #16]	; (80004dc <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 80004ca:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80004cc:	695a      	ldr	r2, [r3, #20]
 80004ce:	4210      	tst	r0, r2
 80004d0:	d002      	beq.n	80004d8 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80004d2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80004d4:	f7ff fff6 	bl	80004c4 <HAL_GPIO_EXTI_Callback>
}
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	40010400 	.word	0x40010400

080004e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80004e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004e2:	6803      	ldr	r3, [r0, #0]
{
 80004e4:	b085      	sub	sp, #20
 80004e6:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004e8:	07db      	lsls	r3, r3, #31
 80004ea:	d42f      	bmi.n	800054c <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004ec:	682b      	ldr	r3, [r5, #0]
 80004ee:	079b      	lsls	r3, r3, #30
 80004f0:	d500      	bpl.n	80004f4 <HAL_RCC_OscConfig+0x14>
 80004f2:	e081      	b.n	80005f8 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004f4:	682b      	ldr	r3, [r5, #0]
 80004f6:	071b      	lsls	r3, r3, #28
 80004f8:	d500      	bpl.n	80004fc <HAL_RCC_OscConfig+0x1c>
 80004fa:	e0bc      	b.n	8000676 <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004fc:	682b      	ldr	r3, [r5, #0]
 80004fe:	075b      	lsls	r3, r3, #29
 8000500:	d500      	bpl.n	8000504 <HAL_RCC_OscConfig+0x24>
 8000502:	e0df      	b.n	80006c4 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000504:	682b      	ldr	r3, [r5, #0]
 8000506:	06db      	lsls	r3, r3, #27
 8000508:	d51a      	bpl.n	8000540 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800050a:	696a      	ldr	r2, [r5, #20]
 800050c:	4cb5      	ldr	r4, [pc, #724]	; (80007e4 <HAL_RCC_OscConfig+0x304>)
 800050e:	2304      	movs	r3, #4
 8000510:	2a01      	cmp	r2, #1
 8000512:	d000      	beq.n	8000516 <HAL_RCC_OscConfig+0x36>
 8000514:	e14b      	b.n	80007ae <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000516:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000518:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800051a:	430b      	orrs	r3, r1
 800051c:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800051e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000520:	431a      	orrs	r2, r3
 8000522:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000524:	f7ff fea6 	bl	8000274 <HAL_GetTick>
 8000528:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800052a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800052c:	4233      	tst	r3, r6
 800052e:	d100      	bne.n	8000532 <HAL_RCC_OscConfig+0x52>
 8000530:	e136      	b.n	80007a0 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000532:	21f8      	movs	r1, #248	; 0xf8
 8000534:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000536:	69ab      	ldr	r3, [r5, #24]
 8000538:	438a      	bics	r2, r1
 800053a:	00db      	lsls	r3, r3, #3
 800053c:	4313      	orrs	r3, r2
 800053e:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000540:	6a29      	ldr	r1, [r5, #32]
 8000542:	2900      	cmp	r1, #0
 8000544:	d000      	beq.n	8000548 <HAL_RCC_OscConfig+0x68>
 8000546:	e159      	b.n	80007fc <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000548:	2000      	movs	r0, #0
 800054a:	e013      	b.n	8000574 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800054c:	210c      	movs	r1, #12
 800054e:	4ca5      	ldr	r4, [pc, #660]	; (80007e4 <HAL_RCC_OscConfig+0x304>)
 8000550:	6862      	ldr	r2, [r4, #4]
 8000552:	400a      	ands	r2, r1
 8000554:	2a04      	cmp	r2, #4
 8000556:	d006      	beq.n	8000566 <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000558:	6863      	ldr	r3, [r4, #4]
 800055a:	400b      	ands	r3, r1
 800055c:	2b08      	cmp	r3, #8
 800055e:	d10b      	bne.n	8000578 <HAL_RCC_OscConfig+0x98>
 8000560:	6863      	ldr	r3, [r4, #4]
 8000562:	03db      	lsls	r3, r3, #15
 8000564:	d508      	bpl.n	8000578 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000566:	6823      	ldr	r3, [r4, #0]
 8000568:	039b      	lsls	r3, r3, #14
 800056a:	d5bf      	bpl.n	80004ec <HAL_RCC_OscConfig+0xc>
 800056c:	686b      	ldr	r3, [r5, #4]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d1bc      	bne.n	80004ec <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000572:	2001      	movs	r0, #1
}
 8000574:	b005      	add	sp, #20
 8000576:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000578:	686b      	ldr	r3, [r5, #4]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d113      	bne.n	80005a6 <HAL_RCC_OscConfig+0xc6>
 800057e:	2380      	movs	r3, #128	; 0x80
 8000580:	6822      	ldr	r2, [r4, #0]
 8000582:	025b      	lsls	r3, r3, #9
 8000584:	4313      	orrs	r3, r2
 8000586:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000588:	f7ff fe74 	bl	8000274 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800058c:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800058e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000590:	02b6      	lsls	r6, r6, #10
 8000592:	6823      	ldr	r3, [r4, #0]
 8000594:	4233      	tst	r3, r6
 8000596:	d1a9      	bne.n	80004ec <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000598:	f7ff fe6c 	bl	8000274 <HAL_GetTick>
 800059c:	1bc0      	subs	r0, r0, r7
 800059e:	2864      	cmp	r0, #100	; 0x64
 80005a0:	d9f7      	bls.n	8000592 <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 80005a2:	2003      	movs	r0, #3
 80005a4:	e7e6      	b.n	8000574 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d116      	bne.n	80005d8 <HAL_RCC_OscConfig+0xf8>
 80005aa:	6823      	ldr	r3, [r4, #0]
 80005ac:	4a8e      	ldr	r2, [pc, #568]	; (80007e8 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005ae:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005b0:	4013      	ands	r3, r2
 80005b2:	6023      	str	r3, [r4, #0]
 80005b4:	6823      	ldr	r3, [r4, #0]
 80005b6:	4a8d      	ldr	r2, [pc, #564]	; (80007ec <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005b8:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005ba:	4013      	ands	r3, r2
 80005bc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005be:	f7ff fe59 	bl	8000274 <HAL_GetTick>
 80005c2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005c4:	6823      	ldr	r3, [r4, #0]
 80005c6:	4233      	tst	r3, r6
 80005c8:	d100      	bne.n	80005cc <HAL_RCC_OscConfig+0xec>
 80005ca:	e78f      	b.n	80004ec <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005cc:	f7ff fe52 	bl	8000274 <HAL_GetTick>
 80005d0:	1bc0      	subs	r0, r0, r7
 80005d2:	2864      	cmp	r0, #100	; 0x64
 80005d4:	d9f6      	bls.n	80005c4 <HAL_RCC_OscConfig+0xe4>
 80005d6:	e7e4      	b.n	80005a2 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005d8:	2b05      	cmp	r3, #5
 80005da:	d105      	bne.n	80005e8 <HAL_RCC_OscConfig+0x108>
 80005dc:	2380      	movs	r3, #128	; 0x80
 80005de:	6822      	ldr	r2, [r4, #0]
 80005e0:	02db      	lsls	r3, r3, #11
 80005e2:	4313      	orrs	r3, r2
 80005e4:	6023      	str	r3, [r4, #0]
 80005e6:	e7ca      	b.n	800057e <HAL_RCC_OscConfig+0x9e>
 80005e8:	6823      	ldr	r3, [r4, #0]
 80005ea:	4a7f      	ldr	r2, [pc, #508]	; (80007e8 <HAL_RCC_OscConfig+0x308>)
 80005ec:	4013      	ands	r3, r2
 80005ee:	6023      	str	r3, [r4, #0]
 80005f0:	6823      	ldr	r3, [r4, #0]
 80005f2:	4a7e      	ldr	r2, [pc, #504]	; (80007ec <HAL_RCC_OscConfig+0x30c>)
 80005f4:	4013      	ands	r3, r2
 80005f6:	e7c6      	b.n	8000586 <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80005f8:	220c      	movs	r2, #12
 80005fa:	4c7a      	ldr	r4, [pc, #488]	; (80007e4 <HAL_RCC_OscConfig+0x304>)
 80005fc:	6863      	ldr	r3, [r4, #4]
 80005fe:	4213      	tst	r3, r2
 8000600:	d006      	beq.n	8000610 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000602:	6863      	ldr	r3, [r4, #4]
 8000604:	4013      	ands	r3, r2
 8000606:	2b08      	cmp	r3, #8
 8000608:	d110      	bne.n	800062c <HAL_RCC_OscConfig+0x14c>
 800060a:	6863      	ldr	r3, [r4, #4]
 800060c:	03db      	lsls	r3, r3, #15
 800060e:	d40d      	bmi.n	800062c <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000610:	6823      	ldr	r3, [r4, #0]
 8000612:	079b      	lsls	r3, r3, #30
 8000614:	d502      	bpl.n	800061c <HAL_RCC_OscConfig+0x13c>
 8000616:	68eb      	ldr	r3, [r5, #12]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d1aa      	bne.n	8000572 <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800061c:	21f8      	movs	r1, #248	; 0xf8
 800061e:	6822      	ldr	r2, [r4, #0]
 8000620:	692b      	ldr	r3, [r5, #16]
 8000622:	438a      	bics	r2, r1
 8000624:	00db      	lsls	r3, r3, #3
 8000626:	4313      	orrs	r3, r2
 8000628:	6023      	str	r3, [r4, #0]
 800062a:	e763      	b.n	80004f4 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800062c:	68ea      	ldr	r2, [r5, #12]
 800062e:	2301      	movs	r3, #1
 8000630:	2a00      	cmp	r2, #0
 8000632:	d00f      	beq.n	8000654 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8000634:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000636:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000638:	4313      	orrs	r3, r2
 800063a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800063c:	f7ff fe1a 	bl	8000274 <HAL_GetTick>
 8000640:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000642:	6823      	ldr	r3, [r4, #0]
 8000644:	4233      	tst	r3, r6
 8000646:	d1e9      	bne.n	800061c <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000648:	f7ff fe14 	bl	8000274 <HAL_GetTick>
 800064c:	1bc0      	subs	r0, r0, r7
 800064e:	2802      	cmp	r0, #2
 8000650:	d9f7      	bls.n	8000642 <HAL_RCC_OscConfig+0x162>
 8000652:	e7a6      	b.n	80005a2 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8000654:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000656:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000658:	439a      	bics	r2, r3
 800065a:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 800065c:	f7ff fe0a 	bl	8000274 <HAL_GetTick>
 8000660:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000662:	6823      	ldr	r3, [r4, #0]
 8000664:	4233      	tst	r3, r6
 8000666:	d100      	bne.n	800066a <HAL_RCC_OscConfig+0x18a>
 8000668:	e744      	b.n	80004f4 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800066a:	f7ff fe03 	bl	8000274 <HAL_GetTick>
 800066e:	1bc0      	subs	r0, r0, r7
 8000670:	2802      	cmp	r0, #2
 8000672:	d9f6      	bls.n	8000662 <HAL_RCC_OscConfig+0x182>
 8000674:	e795      	b.n	80005a2 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000676:	69ea      	ldr	r2, [r5, #28]
 8000678:	2301      	movs	r3, #1
 800067a:	4c5a      	ldr	r4, [pc, #360]	; (80007e4 <HAL_RCC_OscConfig+0x304>)
 800067c:	2a00      	cmp	r2, #0
 800067e:	d010      	beq.n	80006a2 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8000680:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000682:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000684:	4313      	orrs	r3, r2
 8000686:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000688:	f7ff fdf4 	bl	8000274 <HAL_GetTick>
 800068c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800068e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000690:	4233      	tst	r3, r6
 8000692:	d000      	beq.n	8000696 <HAL_RCC_OscConfig+0x1b6>
 8000694:	e732      	b.n	80004fc <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000696:	f7ff fded 	bl	8000274 <HAL_GetTick>
 800069a:	1bc0      	subs	r0, r0, r7
 800069c:	2802      	cmp	r0, #2
 800069e:	d9f6      	bls.n	800068e <HAL_RCC_OscConfig+0x1ae>
 80006a0:	e77f      	b.n	80005a2 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 80006a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006a4:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80006a6:	439a      	bics	r2, r3
 80006a8:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 80006aa:	f7ff fde3 	bl	8000274 <HAL_GetTick>
 80006ae:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006b2:	4233      	tst	r3, r6
 80006b4:	d100      	bne.n	80006b8 <HAL_RCC_OscConfig+0x1d8>
 80006b6:	e721      	b.n	80004fc <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006b8:	f7ff fddc 	bl	8000274 <HAL_GetTick>
 80006bc:	1bc0      	subs	r0, r0, r7
 80006be:	2802      	cmp	r0, #2
 80006c0:	d9f6      	bls.n	80006b0 <HAL_RCC_OscConfig+0x1d0>
 80006c2:	e76e      	b.n	80005a2 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006c4:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80006c6:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006c8:	4c46      	ldr	r4, [pc, #280]	; (80007e4 <HAL_RCC_OscConfig+0x304>)
 80006ca:	0552      	lsls	r2, r2, #21
 80006cc:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80006ce:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006d0:	4213      	tst	r3, r2
 80006d2:	d108      	bne.n	80006e6 <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 80006d4:	69e3      	ldr	r3, [r4, #28]
 80006d6:	4313      	orrs	r3, r2
 80006d8:	61e3      	str	r3, [r4, #28]
 80006da:	69e3      	ldr	r3, [r4, #28]
 80006dc:	4013      	ands	r3, r2
 80006de:	9303      	str	r3, [sp, #12]
 80006e0:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80006e2:	2301      	movs	r3, #1
 80006e4:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006e6:	2780      	movs	r7, #128	; 0x80
 80006e8:	4e41      	ldr	r6, [pc, #260]	; (80007f0 <HAL_RCC_OscConfig+0x310>)
 80006ea:	007f      	lsls	r7, r7, #1
 80006ec:	6833      	ldr	r3, [r6, #0]
 80006ee:	423b      	tst	r3, r7
 80006f0:	d006      	beq.n	8000700 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006f2:	68ab      	ldr	r3, [r5, #8]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d113      	bne.n	8000720 <HAL_RCC_OscConfig+0x240>
 80006f8:	6a22      	ldr	r2, [r4, #32]
 80006fa:	4313      	orrs	r3, r2
 80006fc:	6223      	str	r3, [r4, #32]
 80006fe:	e030      	b.n	8000762 <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000700:	6833      	ldr	r3, [r6, #0]
 8000702:	433b      	orrs	r3, r7
 8000704:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000706:	f7ff fdb5 	bl	8000274 <HAL_GetTick>
 800070a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800070c:	6833      	ldr	r3, [r6, #0]
 800070e:	423b      	tst	r3, r7
 8000710:	d1ef      	bne.n	80006f2 <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000712:	f7ff fdaf 	bl	8000274 <HAL_GetTick>
 8000716:	9b01      	ldr	r3, [sp, #4]
 8000718:	1ac0      	subs	r0, r0, r3
 800071a:	2864      	cmp	r0, #100	; 0x64
 800071c:	d9f6      	bls.n	800070c <HAL_RCC_OscConfig+0x22c>
 800071e:	e740      	b.n	80005a2 <HAL_RCC_OscConfig+0xc2>
 8000720:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000722:	2b00      	cmp	r3, #0
 8000724:	d114      	bne.n	8000750 <HAL_RCC_OscConfig+0x270>
 8000726:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000728:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800072a:	4393      	bics	r3, r2
 800072c:	6223      	str	r3, [r4, #32]
 800072e:	6a23      	ldr	r3, [r4, #32]
 8000730:	3203      	adds	r2, #3
 8000732:	4393      	bics	r3, r2
 8000734:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000736:	f7ff fd9d 	bl	8000274 <HAL_GetTick>
 800073a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800073c:	6a23      	ldr	r3, [r4, #32]
 800073e:	423b      	tst	r3, r7
 8000740:	d025      	beq.n	800078e <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000742:	f7ff fd97 	bl	8000274 <HAL_GetTick>
 8000746:	4b2b      	ldr	r3, [pc, #172]	; (80007f4 <HAL_RCC_OscConfig+0x314>)
 8000748:	1b80      	subs	r0, r0, r6
 800074a:	4298      	cmp	r0, r3
 800074c:	d9f6      	bls.n	800073c <HAL_RCC_OscConfig+0x25c>
 800074e:	e728      	b.n	80005a2 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000750:	2b05      	cmp	r3, #5
 8000752:	d10b      	bne.n	800076c <HAL_RCC_OscConfig+0x28c>
 8000754:	6a21      	ldr	r1, [r4, #32]
 8000756:	3b01      	subs	r3, #1
 8000758:	430b      	orrs	r3, r1
 800075a:	6223      	str	r3, [r4, #32]
 800075c:	6a23      	ldr	r3, [r4, #32]
 800075e:	431a      	orrs	r2, r3
 8000760:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8000762:	f7ff fd87 	bl	8000274 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000766:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000768:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800076a:	e00d      	b.n	8000788 <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800076c:	6a23      	ldr	r3, [r4, #32]
 800076e:	4393      	bics	r3, r2
 8000770:	2204      	movs	r2, #4
 8000772:	6223      	str	r3, [r4, #32]
 8000774:	6a23      	ldr	r3, [r4, #32]
 8000776:	4393      	bics	r3, r2
 8000778:	e7c0      	b.n	80006fc <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800077a:	f7ff fd7b 	bl	8000274 <HAL_GetTick>
 800077e:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <HAL_RCC_OscConfig+0x314>)
 8000780:	1b80      	subs	r0, r0, r6
 8000782:	4298      	cmp	r0, r3
 8000784:	d900      	bls.n	8000788 <HAL_RCC_OscConfig+0x2a8>
 8000786:	e70c      	b.n	80005a2 <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000788:	6a23      	ldr	r3, [r4, #32]
 800078a:	423b      	tst	r3, r7
 800078c:	d0f5      	beq.n	800077a <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 800078e:	9b00      	ldr	r3, [sp, #0]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d000      	beq.n	8000796 <HAL_RCC_OscConfig+0x2b6>
 8000794:	e6b6      	b.n	8000504 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000796:	69e3      	ldr	r3, [r4, #28]
 8000798:	4a17      	ldr	r2, [pc, #92]	; (80007f8 <HAL_RCC_OscConfig+0x318>)
 800079a:	4013      	ands	r3, r2
 800079c:	61e3      	str	r3, [r4, #28]
 800079e:	e6b1      	b.n	8000504 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80007a0:	f7ff fd68 	bl	8000274 <HAL_GetTick>
 80007a4:	1bc0      	subs	r0, r0, r7
 80007a6:	2802      	cmp	r0, #2
 80007a8:	d800      	bhi.n	80007ac <HAL_RCC_OscConfig+0x2cc>
 80007aa:	e6be      	b.n	800052a <HAL_RCC_OscConfig+0x4a>
 80007ac:	e6f9      	b.n	80005a2 <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80007ae:	3205      	adds	r2, #5
 80007b0:	d103      	bne.n	80007ba <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 80007b2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80007b4:	439a      	bics	r2, r3
 80007b6:	6362      	str	r2, [r4, #52]	; 0x34
 80007b8:	e6bb      	b.n	8000532 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 80007ba:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80007bc:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80007be:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 80007c0:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 80007c2:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80007c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80007c6:	4393      	bics	r3, r2
 80007c8:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 80007ca:	f7ff fd53 	bl	8000274 <HAL_GetTick>
 80007ce:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80007d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80007d2:	4233      	tst	r3, r6
 80007d4:	d100      	bne.n	80007d8 <HAL_RCC_OscConfig+0x2f8>
 80007d6:	e6b3      	b.n	8000540 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80007d8:	f7ff fd4c 	bl	8000274 <HAL_GetTick>
 80007dc:	1bc0      	subs	r0, r0, r7
 80007de:	2802      	cmp	r0, #2
 80007e0:	d9f6      	bls.n	80007d0 <HAL_RCC_OscConfig+0x2f0>
 80007e2:	e6de      	b.n	80005a2 <HAL_RCC_OscConfig+0xc2>
 80007e4:	40021000 	.word	0x40021000
 80007e8:	fffeffff 	.word	0xfffeffff
 80007ec:	fffbffff 	.word	0xfffbffff
 80007f0:	40007000 	.word	0x40007000
 80007f4:	00001388 	.word	0x00001388
 80007f8:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80007fc:	220c      	movs	r2, #12
 80007fe:	4c26      	ldr	r4, [pc, #152]	; (8000898 <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 8000800:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000802:	6863      	ldr	r3, [r4, #4]
 8000804:	4013      	ands	r3, r2
 8000806:	2b08      	cmp	r3, #8
 8000808:	d100      	bne.n	800080c <HAL_RCC_OscConfig+0x32c>
 800080a:	e6b3      	b.n	8000574 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 800080c:	6823      	ldr	r3, [r4, #0]
 800080e:	4a23      	ldr	r2, [pc, #140]	; (800089c <HAL_RCC_OscConfig+0x3bc>)
 8000810:	4013      	ands	r3, r2
 8000812:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000814:	2902      	cmp	r1, #2
 8000816:	d12f      	bne.n	8000878 <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 8000818:	f7ff fd2c 	bl	8000274 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800081c:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800081e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000820:	04b6      	lsls	r6, r6, #18
 8000822:	6823      	ldr	r3, [r4, #0]
 8000824:	4233      	tst	r3, r6
 8000826:	d121      	bne.n	800086c <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000828:	220f      	movs	r2, #15
 800082a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800082c:	4393      	bics	r3, r2
 800082e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000830:	4313      	orrs	r3, r2
 8000832:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000834:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000836:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000838:	6862      	ldr	r2, [r4, #4]
 800083a:	430b      	orrs	r3, r1
 800083c:	4918      	ldr	r1, [pc, #96]	; (80008a0 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800083e:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000840:	400a      	ands	r2, r1
 8000842:	4313      	orrs	r3, r2
 8000844:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000846:	2380      	movs	r3, #128	; 0x80
 8000848:	6822      	ldr	r2, [r4, #0]
 800084a:	045b      	lsls	r3, r3, #17
 800084c:	4313      	orrs	r3, r2
 800084e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000850:	f7ff fd10 	bl	8000274 <HAL_GetTick>
 8000854:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000856:	04ad      	lsls	r5, r5, #18
 8000858:	6823      	ldr	r3, [r4, #0]
 800085a:	422b      	tst	r3, r5
 800085c:	d000      	beq.n	8000860 <HAL_RCC_OscConfig+0x380>
 800085e:	e673      	b.n	8000548 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000860:	f7ff fd08 	bl	8000274 <HAL_GetTick>
 8000864:	1b80      	subs	r0, r0, r6
 8000866:	2802      	cmp	r0, #2
 8000868:	d9f6      	bls.n	8000858 <HAL_RCC_OscConfig+0x378>
 800086a:	e69a      	b.n	80005a2 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800086c:	f7ff fd02 	bl	8000274 <HAL_GetTick>
 8000870:	1bc0      	subs	r0, r0, r7
 8000872:	2802      	cmp	r0, #2
 8000874:	d9d5      	bls.n	8000822 <HAL_RCC_OscConfig+0x342>
 8000876:	e694      	b.n	80005a2 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000878:	f7ff fcfc 	bl	8000274 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800087c:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 800087e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000880:	04ad      	lsls	r5, r5, #18
 8000882:	6823      	ldr	r3, [r4, #0]
 8000884:	422b      	tst	r3, r5
 8000886:	d100      	bne.n	800088a <HAL_RCC_OscConfig+0x3aa>
 8000888:	e65e      	b.n	8000548 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800088a:	f7ff fcf3 	bl	8000274 <HAL_GetTick>
 800088e:	1b80      	subs	r0, r0, r6
 8000890:	2802      	cmp	r0, #2
 8000892:	d9f6      	bls.n	8000882 <HAL_RCC_OscConfig+0x3a2>
 8000894:	e685      	b.n	80005a2 <HAL_RCC_OscConfig+0xc2>
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	40021000 	.word	0x40021000
 800089c:	feffffff 	.word	0xfeffffff
 80008a0:	ffc2ffff 	.word	0xffc2ffff

080008a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80008a4:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80008a6:	4c14      	ldr	r4, [pc, #80]	; (80008f8 <HAL_RCC_GetSysClockFreq+0x54>)
{
 80008a8:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80008aa:	2210      	movs	r2, #16
 80008ac:	0021      	movs	r1, r4
 80008ae:	4668      	mov	r0, sp
 80008b0:	f000 fc4e 	bl	8001150 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80008b4:	0021      	movs	r1, r4
 80008b6:	ad04      	add	r5, sp, #16
 80008b8:	2210      	movs	r2, #16
 80008ba:	3110      	adds	r1, #16
 80008bc:	0028      	movs	r0, r5
 80008be:	f000 fc47 	bl	8001150 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80008c2:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80008c4:	4e0d      	ldr	r6, [pc, #52]	; (80008fc <HAL_RCC_GetSysClockFreq+0x58>)
 80008c6:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80008c8:	401a      	ands	r2, r3
 80008ca:	2a08      	cmp	r2, #8
 80008cc:	d111      	bne.n	80008f2 <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80008ce:	200f      	movs	r0, #15
 80008d0:	466a      	mov	r2, sp
 80008d2:	0c99      	lsrs	r1, r3, #18
 80008d4:	4001      	ands	r1, r0
 80008d6:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80008d8:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80008da:	4002      	ands	r2, r0
 80008dc:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80008de:	03db      	lsls	r3, r3, #15
 80008e0:	d505      	bpl.n	80008ee <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80008e2:	4807      	ldr	r0, [pc, #28]	; (8000900 <HAL_RCC_GetSysClockFreq+0x5c>)
 80008e4:	f7ff fc10 	bl	8000108 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80008e8:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80008ea:	b008      	add	sp, #32
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <HAL_RCC_GetSysClockFreq+0x60>)
 80008f0:	e7fa      	b.n	80008e8 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 80008f2:	4803      	ldr	r0, [pc, #12]	; (8000900 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 80008f4:	e7f9      	b.n	80008ea <HAL_RCC_GetSysClockFreq+0x46>
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	0800117c 	.word	0x0800117c
 80008fc:	40021000 	.word	0x40021000
 8000900:	007a1200 	.word	0x007a1200
 8000904:	003d0900 	.word	0x003d0900

08000908 <HAL_RCC_ClockConfig>:
{
 8000908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800090a:	2201      	movs	r2, #1
 800090c:	4c43      	ldr	r4, [pc, #268]	; (8000a1c <HAL_RCC_ClockConfig+0x114>)
{
 800090e:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000910:	6823      	ldr	r3, [r4, #0]
{
 8000912:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000914:	4013      	ands	r3, r2
 8000916:	428b      	cmp	r3, r1
 8000918:	d31c      	bcc.n	8000954 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800091a:	6832      	ldr	r2, [r6, #0]
 800091c:	0793      	lsls	r3, r2, #30
 800091e:	d423      	bmi.n	8000968 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000920:	07d3      	lsls	r3, r2, #31
 8000922:	d429      	bmi.n	8000978 <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000924:	2301      	movs	r3, #1
 8000926:	6822      	ldr	r2, [r4, #0]
 8000928:	401a      	ands	r2, r3
 800092a:	4297      	cmp	r7, r2
 800092c:	d367      	bcc.n	80009fe <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800092e:	6833      	ldr	r3, [r6, #0]
 8000930:	4c3b      	ldr	r4, [pc, #236]	; (8000a20 <HAL_RCC_ClockConfig+0x118>)
 8000932:	075b      	lsls	r3, r3, #29
 8000934:	d46a      	bmi.n	8000a0c <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000936:	f7ff ffb5 	bl	80008a4 <HAL_RCC_GetSysClockFreq>
 800093a:	6863      	ldr	r3, [r4, #4]
 800093c:	4a39      	ldr	r2, [pc, #228]	; (8000a24 <HAL_RCC_ClockConfig+0x11c>)
 800093e:	061b      	lsls	r3, r3, #24
 8000940:	0f1b      	lsrs	r3, r3, #28
 8000942:	5cd3      	ldrb	r3, [r2, r3]
 8000944:	40d8      	lsrs	r0, r3
 8000946:	4b38      	ldr	r3, [pc, #224]	; (8000a28 <HAL_RCC_ClockConfig+0x120>)
 8000948:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800094a:	2000      	movs	r0, #0
 800094c:	f7ff fc68 	bl	8000220 <HAL_InitTick>
  return HAL_OK;
 8000950:	2000      	movs	r0, #0
 8000952:	e008      	b.n	8000966 <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000954:	6823      	ldr	r3, [r4, #0]
 8000956:	4393      	bics	r3, r2
 8000958:	430b      	orrs	r3, r1
 800095a:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800095c:	6823      	ldr	r3, [r4, #0]
 800095e:	4013      	ands	r3, r2
 8000960:	4299      	cmp	r1, r3
 8000962:	d0da      	beq.n	800091a <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000964:	2001      	movs	r0, #1
}
 8000966:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000968:	20f0      	movs	r0, #240	; 0xf0
 800096a:	492d      	ldr	r1, [pc, #180]	; (8000a20 <HAL_RCC_ClockConfig+0x118>)
 800096c:	684b      	ldr	r3, [r1, #4]
 800096e:	4383      	bics	r3, r0
 8000970:	68b0      	ldr	r0, [r6, #8]
 8000972:	4303      	orrs	r3, r0
 8000974:	604b      	str	r3, [r1, #4]
 8000976:	e7d3      	b.n	8000920 <HAL_RCC_ClockConfig+0x18>
 8000978:	4d29      	ldr	r5, [pc, #164]	; (8000a20 <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800097a:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800097c:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800097e:	2a01      	cmp	r2, #1
 8000980:	d11a      	bne.n	80009b8 <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000982:	039b      	lsls	r3, r3, #14
 8000984:	d5ee      	bpl.n	8000964 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000986:	2103      	movs	r1, #3
 8000988:	686b      	ldr	r3, [r5, #4]
 800098a:	438b      	bics	r3, r1
 800098c:	4313      	orrs	r3, r2
 800098e:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000990:	f7ff fc70 	bl	8000274 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000994:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000996:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000998:	2b01      	cmp	r3, #1
 800099a:	d115      	bne.n	80009c8 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800099c:	220c      	movs	r2, #12
 800099e:	686b      	ldr	r3, [r5, #4]
 80009a0:	4013      	ands	r3, r2
 80009a2:	2b04      	cmp	r3, #4
 80009a4:	d0be      	beq.n	8000924 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009a6:	f7ff fc65 	bl	8000274 <HAL_GetTick>
 80009aa:	9b01      	ldr	r3, [sp, #4]
 80009ac:	1ac0      	subs	r0, r0, r3
 80009ae:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <HAL_RCC_ClockConfig+0x124>)
 80009b0:	4298      	cmp	r0, r3
 80009b2:	d9f3      	bls.n	800099c <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 80009b4:	2003      	movs	r0, #3
 80009b6:	e7d6      	b.n	8000966 <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009b8:	2a02      	cmp	r2, #2
 80009ba:	d102      	bne.n	80009c2 <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009bc:	019b      	lsls	r3, r3, #6
 80009be:	d4e2      	bmi.n	8000986 <HAL_RCC_ClockConfig+0x7e>
 80009c0:	e7d0      	b.n	8000964 <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009c2:	079b      	lsls	r3, r3, #30
 80009c4:	d4df      	bmi.n	8000986 <HAL_RCC_ClockConfig+0x7e>
 80009c6:	e7cd      	b.n	8000964 <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d012      	beq.n	80009f2 <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80009cc:	220c      	movs	r2, #12
 80009ce:	686b      	ldr	r3, [r5, #4]
 80009d0:	4213      	tst	r3, r2
 80009d2:	d0a7      	beq.n	8000924 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009d4:	f7ff fc4e 	bl	8000274 <HAL_GetTick>
 80009d8:	9b01      	ldr	r3, [sp, #4]
 80009da:	1ac0      	subs	r0, r0, r3
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <HAL_RCC_ClockConfig+0x124>)
 80009de:	4298      	cmp	r0, r3
 80009e0:	d9f4      	bls.n	80009cc <HAL_RCC_ClockConfig+0xc4>
 80009e2:	e7e7      	b.n	80009b4 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009e4:	f7ff fc46 	bl	8000274 <HAL_GetTick>
 80009e8:	9b01      	ldr	r3, [sp, #4]
 80009ea:	1ac0      	subs	r0, r0, r3
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <HAL_RCC_ClockConfig+0x124>)
 80009ee:	4298      	cmp	r0, r3
 80009f0:	d8e0      	bhi.n	80009b4 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009f2:	220c      	movs	r2, #12
 80009f4:	686b      	ldr	r3, [r5, #4]
 80009f6:	4013      	ands	r3, r2
 80009f8:	2b08      	cmp	r3, #8
 80009fa:	d1f3      	bne.n	80009e4 <HAL_RCC_ClockConfig+0xdc>
 80009fc:	e792      	b.n	8000924 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009fe:	6822      	ldr	r2, [r4, #0]
 8000a00:	439a      	bics	r2, r3
 8000a02:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a04:	6822      	ldr	r2, [r4, #0]
 8000a06:	421a      	tst	r2, r3
 8000a08:	d1ac      	bne.n	8000964 <HAL_RCC_ClockConfig+0x5c>
 8000a0a:	e790      	b.n	800092e <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000a0c:	6863      	ldr	r3, [r4, #4]
 8000a0e:	4a08      	ldr	r2, [pc, #32]	; (8000a30 <HAL_RCC_ClockConfig+0x128>)
 8000a10:	4013      	ands	r3, r2
 8000a12:	68f2      	ldr	r2, [r6, #12]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	6063      	str	r3, [r4, #4]
 8000a18:	e78d      	b.n	8000936 <HAL_RCC_ClockConfig+0x2e>
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	40022000 	.word	0x40022000
 8000a20:	40021000 	.word	0x40021000
 8000a24:	0800119c 	.word	0x0800119c
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	00001388 	.word	0x00001388
 8000a30:	fffff8ff 	.word	0xfffff8ff

08000a34 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000a34:	4b01      	ldr	r3, [pc, #4]	; (8000a3c <HAL_RCC_GetHCLKFreq+0x8>)
 8000a36:	6818      	ldr	r0, [r3, #0]
}
 8000a38:	4770      	bx	lr
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	20000000 	.word	0x20000000

08000a40 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000a40:	2201      	movs	r2, #1
 8000a42:	6803      	ldr	r3, [r0, #0]
 8000a44:	68d9      	ldr	r1, [r3, #12]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8000a46:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000a48:	4311      	orrs	r1, r2
 8000a4a:	60d9      	str	r1, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8000a4c:	6819      	ldr	r1, [r3, #0]
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	601a      	str	r2, [r3, #0]
}
 8000a52:	4770      	bx	lr

08000a54 <HAL_TIM_OC_DelayElapsedCallback>:
 8000a54:	4770      	bx	lr

08000a56 <HAL_TIM_IC_CaptureCallback>:
 8000a56:	4770      	bx	lr

08000a58 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000a58:	4770      	bx	lr

08000a5a <HAL_TIM_TriggerCallback>:
 8000a5a:	4770      	bx	lr

08000a5c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	6803      	ldr	r3, [r0, #0]
{
 8000a60:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000a62:	6919      	ldr	r1, [r3, #16]
{
 8000a64:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000a66:	4211      	tst	r1, r2
 8000a68:	d00e      	beq.n	8000a88 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000a6a:	68d9      	ldr	r1, [r3, #12]
 8000a6c:	4211      	tst	r1, r2
 8000a6e:	d00b      	beq.n	8000a88 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000a70:	3a05      	subs	r2, #5
 8000a72:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000a74:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000a76:	3204      	adds	r2, #4
 8000a78:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000a7a:	079b      	lsls	r3, r3, #30
 8000a7c:	d100      	bne.n	8000a80 <HAL_TIM_IRQHandler+0x24>
 8000a7e:	e079      	b.n	8000b74 <HAL_TIM_IRQHandler+0x118>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000a80:	f7ff ffe9 	bl	8000a56 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000a84:	2300      	movs	r3, #0
 8000a86:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000a88:	2204      	movs	r2, #4
 8000a8a:	6823      	ldr	r3, [r4, #0]
 8000a8c:	6919      	ldr	r1, [r3, #16]
 8000a8e:	4211      	tst	r1, r2
 8000a90:	d010      	beq.n	8000ab4 <HAL_TIM_IRQHandler+0x58>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000a92:	68d9      	ldr	r1, [r3, #12]
 8000a94:	4211      	tst	r1, r2
 8000a96:	d00d      	beq.n	8000ab4 <HAL_TIM_IRQHandler+0x58>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000a98:	3a09      	subs	r2, #9
 8000a9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000a9c:	3207      	adds	r2, #7
 8000a9e:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000aa0:	699a      	ldr	r2, [r3, #24]
 8000aa2:	23c0      	movs	r3, #192	; 0xc0
 8000aa4:	009b      	lsls	r3, r3, #2
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000aa6:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000aa8:	421a      	tst	r2, r3
 8000aaa:	d069      	beq.n	8000b80 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8000aac:	f7ff ffd3 	bl	8000a56 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000ab4:	2208      	movs	r2, #8
 8000ab6:	6823      	ldr	r3, [r4, #0]
 8000ab8:	6919      	ldr	r1, [r3, #16]
 8000aba:	4211      	tst	r1, r2
 8000abc:	d00e      	beq.n	8000adc <HAL_TIM_IRQHandler+0x80>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000abe:	68d9      	ldr	r1, [r3, #12]
 8000ac0:	4211      	tst	r1, r2
 8000ac2:	d00b      	beq.n	8000adc <HAL_TIM_IRQHandler+0x80>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000ac4:	3a11      	subs	r2, #17
 8000ac6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000ac8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000aca:	320d      	adds	r2, #13
 8000acc:	7722      	strb	r2, [r4, #28]
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000ace:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000ad0:	079b      	lsls	r3, r3, #30
 8000ad2:	d05b      	beq.n	8000b8c <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8000ad4:	f7ff ffbf 	bl	8000a56 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000adc:	2210      	movs	r2, #16
 8000ade:	6823      	ldr	r3, [r4, #0]
 8000ae0:	6919      	ldr	r1, [r3, #16]
 8000ae2:	4211      	tst	r1, r2
 8000ae4:	d010      	beq.n	8000b08 <HAL_TIM_IRQHandler+0xac>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000ae6:	68d9      	ldr	r1, [r3, #12]
 8000ae8:	4211      	tst	r1, r2
 8000aea:	d00d      	beq.n	8000b08 <HAL_TIM_IRQHandler+0xac>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000aec:	3a21      	subs	r2, #33	; 0x21
 8000aee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000af0:	3219      	adds	r2, #25
 8000af2:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000af4:	69da      	ldr	r2, [r3, #28]
 8000af6:	23c0      	movs	r3, #192	; 0xc0
 8000af8:	009b      	lsls	r3, r3, #2
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000afa:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000afc:	421a      	tst	r2, r3
 8000afe:	d04b      	beq.n	8000b98 <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 8000b00:	f7ff ffa9 	bl	8000a56 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000b04:	2300      	movs	r3, #0
 8000b06:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	6823      	ldr	r3, [r4, #0]
 8000b0c:	6919      	ldr	r1, [r3, #16]
 8000b0e:	4211      	tst	r1, r2
 8000b10:	d007      	beq.n	8000b22 <HAL_TIM_IRQHandler+0xc6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000b12:	68d9      	ldr	r1, [r3, #12]
 8000b14:	4211      	tst	r1, r2
 8000b16:	d004      	beq.n	8000b22 <HAL_TIM_IRQHandler+0xc6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000b18:	3a03      	subs	r2, #3
 8000b1a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000b1c:	0020      	movs	r0, r4
 8000b1e:	f000 f991 	bl	8000e44 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000b22:	2280      	movs	r2, #128	; 0x80
 8000b24:	6823      	ldr	r3, [r4, #0]
 8000b26:	6919      	ldr	r1, [r3, #16]
 8000b28:	4211      	tst	r1, r2
 8000b2a:	d008      	beq.n	8000b3e <HAL_TIM_IRQHandler+0xe2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000b2c:	68d9      	ldr	r1, [r3, #12]
 8000b2e:	4211      	tst	r1, r2
 8000b30:	d005      	beq.n	8000b3e <HAL_TIM_IRQHandler+0xe2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000b32:	3a02      	subs	r2, #2
 8000b34:	3aff      	subs	r2, #255	; 0xff
 8000b36:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000b38:	0020      	movs	r0, r4
 8000b3a:	f000 f981 	bl	8000e40 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000b3e:	2240      	movs	r2, #64	; 0x40
 8000b40:	6823      	ldr	r3, [r4, #0]
 8000b42:	6919      	ldr	r1, [r3, #16]
 8000b44:	4211      	tst	r1, r2
 8000b46:	d007      	beq.n	8000b58 <HAL_TIM_IRQHandler+0xfc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000b48:	68d9      	ldr	r1, [r3, #12]
 8000b4a:	4211      	tst	r1, r2
 8000b4c:	d004      	beq.n	8000b58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000b4e:	3a81      	subs	r2, #129	; 0x81
 8000b50:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000b52:	0020      	movs	r0, r4
 8000b54:	f7ff ff81 	bl	8000a5a <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000b58:	2220      	movs	r2, #32
 8000b5a:	6823      	ldr	r3, [r4, #0]
 8000b5c:	6919      	ldr	r1, [r3, #16]
 8000b5e:	4211      	tst	r1, r2
 8000b60:	d007      	beq.n	8000b72 <HAL_TIM_IRQHandler+0x116>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000b62:	68d9      	ldr	r1, [r3, #12]
 8000b64:	4211      	tst	r1, r2
 8000b66:	d004      	beq.n	8000b72 <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000b68:	3a41      	subs	r2, #65	; 0x41
 8000b6a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8000b6c:	0020      	movs	r0, r4
 8000b6e:	f000 f966 	bl	8000e3e <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8000b72:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b74:	f7ff ff6e 	bl	8000a54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b78:	0020      	movs	r0, r4
 8000b7a:	f7ff ff6d 	bl	8000a58 <HAL_TIM_PWM_PulseFinishedCallback>
 8000b7e:	e781      	b.n	8000a84 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b80:	f7ff ff68 	bl	8000a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b84:	0020      	movs	r0, r4
 8000b86:	f7ff ff67 	bl	8000a58 <HAL_TIM_PWM_PulseFinishedCallback>
 8000b8a:	e791      	b.n	8000ab0 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b8c:	f7ff ff62 	bl	8000a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b90:	0020      	movs	r0, r4
 8000b92:	f7ff ff61 	bl	8000a58 <HAL_TIM_PWM_PulseFinishedCallback>
 8000b96:	e79f      	b.n	8000ad8 <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b98:	f7ff ff5c 	bl	8000a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b9c:	0020      	movs	r0, r4
 8000b9e:	f7ff ff5b 	bl	8000a58 <HAL_TIM_PWM_PulseFinishedCallback>
 8000ba2:	e7af      	b.n	8000b04 <HAL_TIM_IRQHandler+0xa8>

08000ba4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000ba4:	4a20      	ldr	r2, [pc, #128]	; (8000c28 <TIM_Base_SetConfig+0x84>)
{
 8000ba6:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8000ba8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000baa:	4290      	cmp	r0, r2
 8000bac:	d006      	beq.n	8000bbc <TIM_Base_SetConfig+0x18>
 8000bae:	2480      	movs	r4, #128	; 0x80
 8000bb0:	05e4      	lsls	r4, r4, #23
 8000bb2:	42a0      	cmp	r0, r4
 8000bb4:	d002      	beq.n	8000bbc <TIM_Base_SetConfig+0x18>
 8000bb6:	4c1d      	ldr	r4, [pc, #116]	; (8000c2c <TIM_Base_SetConfig+0x88>)
 8000bb8:	42a0      	cmp	r0, r4
 8000bba:	d10c      	bne.n	8000bd6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000bbc:	2470      	movs	r4, #112	; 0x70
 8000bbe:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8000bc0:	684c      	ldr	r4, [r1, #4]
 8000bc2:	4323      	orrs	r3, r4
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000bc4:	4290      	cmp	r0, r2
 8000bc6:	d012      	beq.n	8000bee <TIM_Base_SetConfig+0x4a>
 8000bc8:	2480      	movs	r4, #128	; 0x80
 8000bca:	05e4      	lsls	r4, r4, #23
 8000bcc:	42a0      	cmp	r0, r4
 8000bce:	d00e      	beq.n	8000bee <TIM_Base_SetConfig+0x4a>
 8000bd0:	4c16      	ldr	r4, [pc, #88]	; (8000c2c <TIM_Base_SetConfig+0x88>)
 8000bd2:	42a0      	cmp	r0, r4
 8000bd4:	d00b      	beq.n	8000bee <TIM_Base_SetConfig+0x4a>
 8000bd6:	4c16      	ldr	r4, [pc, #88]	; (8000c30 <TIM_Base_SetConfig+0x8c>)
 8000bd8:	42a0      	cmp	r0, r4
 8000bda:	d008      	beq.n	8000bee <TIM_Base_SetConfig+0x4a>
 8000bdc:	4c15      	ldr	r4, [pc, #84]	; (8000c34 <TIM_Base_SetConfig+0x90>)
 8000bde:	42a0      	cmp	r0, r4
 8000be0:	d005      	beq.n	8000bee <TIM_Base_SetConfig+0x4a>
 8000be2:	4c15      	ldr	r4, [pc, #84]	; (8000c38 <TIM_Base_SetConfig+0x94>)
 8000be4:	42a0      	cmp	r0, r4
 8000be6:	d002      	beq.n	8000bee <TIM_Base_SetConfig+0x4a>
 8000be8:	4c14      	ldr	r4, [pc, #80]	; (8000c3c <TIM_Base_SetConfig+0x98>)
 8000bea:	42a0      	cmp	r0, r4
 8000bec:	d103      	bne.n	8000bf6 <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000bee:	4c14      	ldr	r4, [pc, #80]	; (8000c40 <TIM_Base_SetConfig+0x9c>)
 8000bf0:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000bf2:	68cc      	ldr	r4, [r1, #12]
 8000bf4:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000bf6:	2480      	movs	r4, #128	; 0x80
 8000bf8:	43a3      	bics	r3, r4
 8000bfa:	694c      	ldr	r4, [r1, #20]
 8000bfc:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 8000bfe:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000c00:	688b      	ldr	r3, [r1, #8]
 8000c02:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000c04:	680b      	ldr	r3, [r1, #0]
 8000c06:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000c08:	4290      	cmp	r0, r2
 8000c0a:	d008      	beq.n	8000c1e <TIM_Base_SetConfig+0x7a>
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <TIM_Base_SetConfig+0x90>)
 8000c0e:	4298      	cmp	r0, r3
 8000c10:	d005      	beq.n	8000c1e <TIM_Base_SetConfig+0x7a>
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <TIM_Base_SetConfig+0x94>)
 8000c14:	4298      	cmp	r0, r3
 8000c16:	d002      	beq.n	8000c1e <TIM_Base_SetConfig+0x7a>
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <TIM_Base_SetConfig+0x98>)
 8000c1a:	4298      	cmp	r0, r3
 8000c1c:	d101      	bne.n	8000c22 <TIM_Base_SetConfig+0x7e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000c1e:	690b      	ldr	r3, [r1, #16]
 8000c20:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8000c22:	2301      	movs	r3, #1
 8000c24:	6143      	str	r3, [r0, #20]
}
 8000c26:	bd10      	pop	{r4, pc}
 8000c28:	40012c00 	.word	0x40012c00
 8000c2c:	40000400 	.word	0x40000400
 8000c30:	40002000 	.word	0x40002000
 8000c34:	40014000 	.word	0x40014000
 8000c38:	40014400 	.word	0x40014400
 8000c3c:	40014800 	.word	0x40014800
 8000c40:	fffffcff 	.word	0xfffffcff

08000c44 <HAL_TIM_Base_Init>:
{
 8000c44:	b570      	push	{r4, r5, r6, lr}
 8000c46:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000c48:	2001      	movs	r0, #1
  if(htim == NULL)
 8000c4a:	2c00      	cmp	r4, #0
 8000c4c:	d014      	beq.n	8000c78 <HAL_TIM_Base_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000c4e:	0025      	movs	r5, r4
 8000c50:	353d      	adds	r5, #61	; 0x3d
 8000c52:	782b      	ldrb	r3, [r5, #0]
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d105      	bne.n	8000c66 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8000c5a:	0022      	movs	r2, r4
 8000c5c:	323c      	adds	r2, #60	; 0x3c
 8000c5e:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8000c60:	0020      	movs	r0, r4
 8000c62:	f000 f9c1 	bl	8000fe8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000c66:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000c68:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000c6a:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000c6c:	1d21      	adds	r1, r4, #4
 8000c6e:	f7ff ff99 	bl	8000ba4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000c72:	2301      	movs	r3, #1
  return HAL_OK;
 8000c74:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000c76:	702b      	strb	r3, [r5, #0]
}
 8000c78:	bd70      	pop	{r4, r5, r6, pc}
	...

08000c7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8000c7c:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8000c7e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000c80:	4d03      	ldr	r5, [pc, #12]	; (8000c90 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000c82:	430a      	orrs	r2, r1
 8000c84:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000c86:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000c8c:	6083      	str	r3, [r0, #8]
}
 8000c8e:	bd30      	pop	{r4, r5, pc}
 8000c90:	ffff00ff 	.word	0xffff00ff

08000c94 <HAL_TIM_ConfigClockSource>:
{
 8000c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8000c96:	0005      	movs	r5, r0
 8000c98:	2302      	movs	r3, #2
 8000c9a:	353c      	adds	r5, #60	; 0x3c
 8000c9c:	782a      	ldrb	r2, [r5, #0]
{
 8000c9e:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	2a01      	cmp	r2, #1
 8000ca4:	d019      	beq.n	8000cda <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8000ca6:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 8000ca8:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 8000caa:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000cac:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 8000cae:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000cb0:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8000cb2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000cb4:	4a4f      	ldr	r2, [pc, #316]	; (8000df4 <HAL_TIM_ConfigClockSource+0x160>)
 8000cb6:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8000cb8:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8000cba:	680b      	ldr	r3, [r1, #0]
 8000cbc:	2b40      	cmp	r3, #64	; 0x40
 8000cbe:	d100      	bne.n	8000cc2 <HAL_TIM_ConfigClockSource+0x2e>
 8000cc0:	e06f      	b.n	8000da2 <HAL_TIM_ConfigClockSource+0x10e>
 8000cc2:	d816      	bhi.n	8000cf2 <HAL_TIM_ConfigClockSource+0x5e>
 8000cc4:	2b10      	cmp	r3, #16
 8000cc6:	d100      	bne.n	8000cca <HAL_TIM_ConfigClockSource+0x36>
 8000cc8:	e087      	b.n	8000dda <HAL_TIM_ConfigClockSource+0x146>
 8000cca:	d807      	bhi.n	8000cdc <HAL_TIM_ConfigClockSource+0x48>
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d100      	bne.n	8000cd2 <HAL_TIM_ConfigClockSource+0x3e>
 8000cd0:	e07d      	b.n	8000dce <HAL_TIM_ConfigClockSource+0x13a>
  htim->State = HAL_TIM_STATE_READY;
 8000cd2:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8000cd4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000cd6:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8000cd8:	7028      	strb	r0, [r5, #0]
}
 8000cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8000cdc:	2b20      	cmp	r3, #32
 8000cde:	d100      	bne.n	8000ce2 <HAL_TIM_ConfigClockSource+0x4e>
 8000ce0:	e081      	b.n	8000de6 <HAL_TIM_ConfigClockSource+0x152>
 8000ce2:	2b30      	cmp	r3, #48	; 0x30
 8000ce4:	d1f5      	bne.n	8000cd2 <HAL_TIM_ConfigClockSource+0x3e>
   tmpsmcr &= ~TIM_SMCR_TS;
 8000ce6:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8000ce8:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000cea:	4393      	bics	r3, r2
 8000cec:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000cee:	2337      	movs	r3, #55	; 0x37
 8000cf0:	e055      	b.n	8000d9e <HAL_TIM_ConfigClockSource+0x10a>
  switch (sClockSourceConfig->ClockSource)
 8000cf2:	2b70      	cmp	r3, #112	; 0x70
 8000cf4:	d033      	beq.n	8000d5e <HAL_TIM_ConfigClockSource+0xca>
 8000cf6:	d81b      	bhi.n	8000d30 <HAL_TIM_ConfigClockSource+0x9c>
 8000cf8:	2b50      	cmp	r3, #80	; 0x50
 8000cfa:	d03b      	beq.n	8000d74 <HAL_TIM_ConfigClockSource+0xe0>
 8000cfc:	2b60      	cmp	r3, #96	; 0x60
 8000cfe:	d1e8      	bne.n	8000cd2 <HAL_TIM_ConfigClockSource+0x3e>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000d00:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000d02:	684b      	ldr	r3, [r1, #4]
 8000d04:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000d06:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000d08:	4f3b      	ldr	r7, [pc, #236]	; (8000df8 <HAL_TIM_ConfigClockSource+0x164>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000d0a:	43a1      	bics	r1, r4
 8000d0c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000d0e:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000d10:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000d12:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000d14:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000d16:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8000d18:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8000d1a:	6182      	str	r2, [r0, #24]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000d1c:	2270      	movs	r2, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000d1e:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8000d20:	011b      	lsls	r3, r3, #4
 8000d22:	430b      	orrs	r3, r1
  TIMx->CCER = tmpccer;
 8000d24:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8000d26:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000d28:	4393      	bics	r3, r2
 8000d2a:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000d2c:	2367      	movs	r3, #103	; 0x67
 8000d2e:	e036      	b.n	8000d9e <HAL_TIM_ConfigClockSource+0x10a>
  switch (sClockSourceConfig->ClockSource)
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	0152      	lsls	r2, r2, #5
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d00d      	beq.n	8000d54 <HAL_TIM_ConfigClockSource+0xc0>
 8000d38:	2280      	movs	r2, #128	; 0x80
 8000d3a:	0192      	lsls	r2, r2, #6
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d1c8      	bne.n	8000cd2 <HAL_TIM_ConfigClockSource+0x3e>
      TIM_ETR_SetConfig(htim->Instance,
 8000d40:	68cb      	ldr	r3, [r1, #12]
 8000d42:	684a      	ldr	r2, [r1, #4]
 8000d44:	6889      	ldr	r1, [r1, #8]
 8000d46:	f7ff ff99 	bl	8000c7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000d4a:	2380      	movs	r3, #128	; 0x80
 8000d4c:	6822      	ldr	r2, [r4, #0]
 8000d4e:	01db      	lsls	r3, r3, #7
 8000d50:	6891      	ldr	r1, [r2, #8]
 8000d52:	e00c      	b.n	8000d6e <HAL_TIM_ConfigClockSource+0xda>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000d54:	2207      	movs	r2, #7
 8000d56:	6883      	ldr	r3, [r0, #8]
 8000d58:	4393      	bics	r3, r2
   TIMx->SMCR = tmpsmcr;
 8000d5a:	6083      	str	r3, [r0, #8]
 8000d5c:	e7b9      	b.n	8000cd2 <HAL_TIM_ConfigClockSource+0x3e>
      TIM_ETR_SetConfig(htim->Instance,
 8000d5e:	68cb      	ldr	r3, [r1, #12]
 8000d60:	684a      	ldr	r2, [r1, #4]
 8000d62:	6889      	ldr	r1, [r1, #8]
 8000d64:	f7ff ff8a 	bl	8000c7c <TIM_ETR_SetConfig>
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8000d68:	2177      	movs	r1, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8000d6a:	6822      	ldr	r2, [r4, #0]
 8000d6c:	6893      	ldr	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000d6e:	430b      	orrs	r3, r1
 8000d70:	6093      	str	r3, [r2, #8]
    break;
 8000d72:	e7ae      	b.n	8000cd2 <HAL_TIM_ConfigClockSource+0x3e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000d74:	684a      	ldr	r2, [r1, #4]
 8000d76:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8000d78:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000d7a:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000d7c:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000d7e:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000d80:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000d82:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000d84:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000d86:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000d88:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000d8a:	240a      	movs	r4, #10
 8000d8c:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8000d8e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8000d90:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8000d92:	6202      	str	r2, [r0, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000d94:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8000d96:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000d98:	4393      	bics	r3, r2
 8000d9a:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000d9c:	2357      	movs	r3, #87	; 0x57
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	e7db      	b.n	8000d5a <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000da2:	684a      	ldr	r2, [r1, #4]
 8000da4:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8000da6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000da8:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000daa:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000dac:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000dae:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000db0:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000db2:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000db4:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000db6:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000db8:	240a      	movs	r4, #10
 8000dba:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8000dbc:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8000dbe:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8000dc0:	6202      	str	r2, [r0, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000dc2:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8000dc4:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000dc6:	4393      	bics	r3, r2
 8000dc8:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000dca:	2347      	movs	r3, #71	; 0x47
 8000dcc:	e7e7      	b.n	8000d9e <HAL_TIM_ConfigClockSource+0x10a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8000dce:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8000dd0:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000dd2:	4393      	bics	r3, r2
 8000dd4:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000dd6:	2307      	movs	r3, #7
 8000dd8:	e7e1      	b.n	8000d9e <HAL_TIM_ConfigClockSource+0x10a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8000dda:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8000ddc:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000dde:	4393      	bics	r3, r2
 8000de0:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000de2:	2317      	movs	r3, #23
 8000de4:	e7db      	b.n	8000d9e <HAL_TIM_ConfigClockSource+0x10a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8000de6:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8000de8:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000dea:	4393      	bics	r3, r2
 8000dec:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000dee:	2327      	movs	r3, #39	; 0x27
 8000df0:	e7d5      	b.n	8000d9e <HAL_TIM_ConfigClockSource+0x10a>
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	ffff0088 	.word	0xffff0088
 8000df8:	ffff0fff 	.word	0xffff0fff

08000dfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8000dfc:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8000dfe:	0004      	movs	r4, r0
 8000e00:	343c      	adds	r4, #60	; 0x3c
 8000e02:	7822      	ldrb	r2, [r4, #0]
{
 8000e04:	0003      	movs	r3, r0
 8000e06:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8000e08:	2a01      	cmp	r2, #1
 8000e0a:	d017      	beq.n	8000e3c <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8000e0c:	001d      	movs	r5, r3

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000e0e:	681b      	ldr	r3, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000e10:	353d      	adds	r5, #61	; 0x3d
 8000e12:	7028      	strb	r0, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000e14:	685a      	ldr	r2, [r3, #4]
 8000e16:	306e      	adds	r0, #110	; 0x6e
 8000e18:	4382      	bics	r2, r0
 8000e1a:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000e1c:	685a      	ldr	r2, [r3, #4]
 8000e1e:	6808      	ldr	r0, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000e20:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000e22:	4302      	orrs	r2, r0
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000e24:	2080      	movs	r0, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000e26:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	4382      	bics	r2, r0
 8000e2c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000e2e:	689a      	ldr	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8000e30:	2000      	movs	r0, #0
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000e32:	430a      	orrs	r2, r1
 8000e34:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8000e36:	2301      	movs	r3, #1
 8000e38:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8000e3a:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8000e3c:	bd30      	pop	{r4, r5, pc}

08000e3e <HAL_TIMEx_CommutationCallback>:
 8000e3e:	4770      	bx	lr

08000e40 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8000e40:	4770      	bx	lr
	...

08000e44 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance == TIM3)
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000e46:	6802      	ldr	r2, [r0, #0]
{
 8000e48:	b510      	push	{r4, lr}
	if(htim->Instance == TIM3)
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d104      	bne.n	8000e58 <HAL_TIM_PeriodElapsedCallback+0x14>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8000e4e:	2180      	movs	r1, #128	; 0x80
 8000e50:	4803      	ldr	r0, [pc, #12]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000e52:	0089      	lsls	r1, r1, #2
 8000e54:	f7ff fb32 	bl	80004bc <HAL_GPIO_TogglePin>
	}
}
 8000e58:	bd10      	pop	{r4, pc}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	40000400 	.word	0x40000400
 8000e60:	48000800 	.word	0x48000800

08000e64 <SystemClock_Config>:

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000e64:	2310      	movs	r3, #16
{
 8000e66:	b530      	push	{r4, r5, lr}
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000e68:	22a0      	movs	r2, #160	; 0xa0
{
 8000e6a:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e6c:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e6e:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000e70:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e72:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000e74:	0392      	lsls	r2, r2, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e76:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e78:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e7a:	9507      	str	r5, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e7c:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e7e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000e80:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000e82:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e84:	f7ff fb2c 	bl	80004e0 <HAL_RCC_OscConfig>
 8000e88:	2800      	cmp	r0, #0
 8000e8a:	d000      	beq.n	8000e8e <SystemClock_Config+0x2a>
 8000e8c:	e7fe      	b.n	8000e8c <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e8e:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e90:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e92:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e94:	0029      	movs	r1, r5
 8000e96:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e98:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9a:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e9c:	f7ff fd34 	bl	8000908 <HAL_RCC_ClockConfig>
 8000ea0:	1e04      	subs	r4, r0, #0
 8000ea2:	d000      	beq.n	8000ea6 <SystemClock_Config+0x42>
 8000ea4:	e7fe      	b.n	8000ea4 <SystemClock_Config+0x40>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000ea6:	f7ff fdc5 	bl	8000a34 <HAL_RCC_GetHCLKFreq>
 8000eaa:	21fa      	movs	r1, #250	; 0xfa
 8000eac:	0089      	lsls	r1, r1, #2
 8000eae:	f7ff f92b 	bl	8000108 <__udivsi3>
 8000eb2:	f7ff fa1f 	bl	80002f4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000eb6:	2004      	movs	r0, #4
 8000eb8:	f7ff fa36 	bl	8000328 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	0022      	movs	r2, r4
 8000ec0:	0021      	movs	r1, r4
 8000ec2:	4240      	negs	r0, r0
 8000ec4:	f7ff f9dc 	bl	8000280 <HAL_NVIC_SetPriority>
}
 8000ec8:	b011      	add	sp, #68	; 0x44
 8000eca:	bd30      	pop	{r4, r5, pc}

08000ecc <main>:
{
 8000ecc:	b530      	push	{r4, r5, lr}
 8000ece:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8000ed0:	f7ff f9b8 	bl	8000244 <HAL_Init>
  SystemClock_Config();
 8000ed4:	f7ff ffc6 	bl	8000e64 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed8:	2080      	movs	r0, #128	; 0x80
 8000eda:	4b2e      	ldr	r3, [pc, #184]	; (8000f94 <main+0xc8>)
 8000edc:	0280      	lsls	r0, r0, #10
 8000ede:	6959      	ldr	r1, [r3, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|LD3_Pin, GPIO_PIN_RESET);
 8000ee0:	25c0      	movs	r5, #192	; 0xc0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee6:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee8:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eea:	0309      	lsls	r1, r1, #12
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eec:	4002      	ands	r2, r0
 8000eee:	9201      	str	r2, [sp, #4]
 8000ef0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef2:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|LD3_Pin, GPIO_PIN_RESET);
 8000ef4:	00ad      	lsls	r5, r5, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	615a      	str	r2, [r3, #20]
 8000efa:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|LD3_Pin, GPIO_PIN_RESET);
 8000efc:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efe:	400b      	ands	r3, r1
 8000f00:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|LD3_Pin, GPIO_PIN_RESET);
 8000f02:	0029      	movs	r1, r5
 8000f04:	4824      	ldr	r0, [pc, #144]	; (8000f98 <main+0xcc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f06:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|LD3_Pin, GPIO_PIN_RESET);
 8000f08:	f7ff fad2 	bl	80004b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f0c:	4b23      	ldr	r3, [pc, #140]	; (8000f9c <main+0xd0>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0e:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f10:	2401      	movs	r4, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f12:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f14:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	a905      	add	r1, sp, #20
 8000f18:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f1a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f1c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f7ff fa17 	bl	8000350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|LD3_Pin;
 8000f22:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2500      	movs	r5, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f26:	a905      	add	r1, sp, #20
 8000f28:	481b      	ldr	r0, [pc, #108]	; (8000f98 <main+0xcc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f30:	f7ff fa0e 	bl	8000350 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000f34:	002a      	movs	r2, r5
 8000f36:	0029      	movs	r1, r5
 8000f38:	2005      	movs	r0, #5
 8000f3a:	f7ff f9a1 	bl	8000280 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000f3e:	2005      	movs	r0, #5
 8000f40:	f7ff f9ce 	bl	80002e0 <HAL_NVIC_EnableIRQ>
  htim3.Instance = TIM3;
 8000f44:	4c16      	ldr	r4, [pc, #88]	; (8000fa0 <main+0xd4>)
 8000f46:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <main+0xd8>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f48:	0020      	movs	r0, r4
  htim3.Instance = TIM3;
 8000f4a:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 48000;
 8000f4c:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <main+0xdc>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4e:	60a5      	str	r5, [r4, #8]
  htim3.Init.Prescaler = 48000;
 8000f50:	6063      	str	r3, [r4, #4]
  htim3.Init.Period = 2000;
 8000f52:	23fa      	movs	r3, #250	; 0xfa
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f58:	6125      	str	r5, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5a:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f5c:	f7ff fe72 	bl	8000c44 <HAL_TIM_Base_Init>
 8000f60:	42a8      	cmp	r0, r5
 8000f62:	d000      	beq.n	8000f66 <main+0x9a>
 8000f64:	e7fe      	b.n	8000f64 <main+0x98>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f66:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f68:	a905      	add	r1, sp, #20
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f6a:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f6c:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f6e:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f70:	f7ff fe90 	bl	8000c94 <HAL_TIM_ConfigClockSource>
 8000f74:	2800      	cmp	r0, #0
 8000f76:	d000      	beq.n	8000f7a <main+0xae>
 8000f78:	e7fe      	b.n	8000f78 <main+0xac>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7a:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7c:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f7e:	a903      	add	r1, sp, #12
 8000f80:	0020      	movs	r0, r4
 8000f82:	f7ff ff3b 	bl	8000dfc <HAL_TIMEx_MasterConfigSynchronization>
 8000f86:	2800      	cmp	r0, #0
 8000f88:	d000      	beq.n	8000f8c <main+0xc0>
 8000f8a:	e7fe      	b.n	8000f8a <main+0xbe>
  HAL_TIM_Base_Start_IT(&htim3);
 8000f8c:	0020      	movs	r0, r4
 8000f8e:	f7ff fd57 	bl	8000a40 <HAL_TIM_Base_Start_IT>
 8000f92:	e7fe      	b.n	8000f92 <main+0xc6>
 8000f94:	40021000 	.word	0x40021000
 8000f98:	48000800 	.word	0x48000800
 8000f9c:	10110000 	.word	0x10110000
 8000fa0:	20000024 	.word	0x20000024
 8000fa4:	40000400 	.word	0x40000400
 8000fa8:	0000bb80 	.word	0x0000bb80

08000fac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fac:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fae:	2001      	movs	r0, #1
 8000fb0:	4a0c      	ldr	r2, [pc, #48]	; (8000fe4 <HAL_MspInit+0x38>)
 8000fb2:	6991      	ldr	r1, [r2, #24]
 8000fb4:	4301      	orrs	r1, r0
 8000fb6:	6191      	str	r1, [r2, #24]
 8000fb8:	6993      	ldr	r3, [r2, #24]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbc:	4003      	ands	r3, r0
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8000fbe:	0011      	movs	r1, r2
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc0:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8000fc2:	3806      	subs	r0, #6
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8000fc6:	f7ff f95b 	bl	8000280 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2002      	movs	r0, #2
 8000fce:	0011      	movs	r1, r2
 8000fd0:	4240      	negs	r0, r0
 8000fd2:	f7ff f955 	bl	8000280 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2001      	movs	r0, #1
 8000fda:	0011      	movs	r1, r2
 8000fdc:	4240      	negs	r0, r0
 8000fde:	f7ff f94f 	bl	8000280 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe2:	bd07      	pop	{r0, r1, r2, pc}
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fe8:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM3)
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <HAL_TIM_Base_MspInit+0x30>)
 8000fec:	6802      	ldr	r2, [r0, #0]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d110      	bne.n	8001014 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ff2:	2002      	movs	r0, #2
 8000ff4:	4a09      	ldr	r2, [pc, #36]	; (800101c <HAL_TIM_Base_MspInit+0x34>)
 8000ff6:	69d1      	ldr	r1, [r2, #28]
 8000ff8:	4301      	orrs	r1, r0
 8000ffa:	61d1      	str	r1, [r2, #28]
 8000ffc:	69d3      	ldr	r3, [r2, #28]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ffe:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001000:	4003      	ands	r3, r0
 8001002:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001004:	300e      	adds	r0, #14
 8001006:	0011      	movs	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001008:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800100a:	f7ff f939 	bl	8000280 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800100e:	2010      	movs	r0, #16
 8001010:	f7ff f966 	bl	80002e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001014:	bd07      	pop	{r0, r1, r2, pc}
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	40000400 	.word	0x40000400
 800101c:	40021000 	.word	0x40021000

08001020 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001020:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001022:	f7ff f91f 	bl	8000264 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001026:	f7ff f98e 	bl	8000346 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800102a:	bd10      	pop	{r4, pc}

0800102c <EXTI0_1_IRQHandler>:
* @brief This function handles EXTI line 0 and 1 interrupts.
*/
void EXTI0_1_IRQHandler(void)
{
	/* USER CODE BEGIN EXTI0_1_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 800102c:	2180      	movs	r1, #128	; 0x80
{
 800102e:	b510      	push	{r4, lr}
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8001030:	0049      	lsls	r1, r1, #1
 8001032:	4803      	ldr	r0, [pc, #12]	; (8001040 <EXTI0_1_IRQHandler+0x14>)
 8001034:	f7ff fa42 	bl	80004bc <HAL_GPIO_TogglePin>
	/* USER CODE END EXTI0_1_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001038:	2001      	movs	r0, #1
 800103a:	f7ff fa45 	bl	80004c8 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI0_1_IRQn 1 */

	/* USER CODE END EXTI0_1_IRQn 1 */
}
 800103e:	bd10      	pop	{r4, pc}
 8001040:	48000800 	.word	0x48000800

08001044 <TIM3_IRQHandler>:

/**
* @brief This function handles TIM3 global interrupt.
*/
void TIM3_IRQHandler(void)
{
 8001044:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001046:	4802      	ldr	r0, [pc, #8]	; (8001050 <TIM3_IRQHandler+0xc>)
 8001048:	f7ff fd08 	bl	8000a5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800104c:	bd10      	pop	{r4, pc}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	20000024 	.word	0x20000024

08001054 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001054:	2101      	movs	r1, #1
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <SystemInit+0x48>)

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 8001058:	4811      	ldr	r0, [pc, #68]	; (80010a0 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	430a      	orrs	r2, r1
 800105e:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 8001060:	685a      	ldr	r2, [r3, #4]
 8001062:	4002      	ands	r2, r0
 8001064:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	480e      	ldr	r0, [pc, #56]	; (80010a4 <SystemInit+0x50>)
 800106a:	4002      	ands	r2, r0
 800106c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	480d      	ldr	r0, [pc, #52]	; (80010a8 <SystemInit+0x54>)
 8001072:	4002      	ands	r2, r0
 8001074:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	480c      	ldr	r0, [pc, #48]	; (80010ac <SystemInit+0x58>)
 800107a:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800107c:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800107e:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001082:	4382      	bics	r2, r0
 8001084:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 8001086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001088:	4809      	ldr	r0, [pc, #36]	; (80010b0 <SystemInit+0x5c>)
 800108a:	4002      	ands	r2, r0
 800108c:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800108e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001090:	438a      	bics	r2, r1
 8001092:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]

}
 8001098:	4770      	bx	lr
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	40021000 	.word	0x40021000
 80010a0:	f8ffb80c 	.word	0xf8ffb80c
 80010a4:	fef6ffff 	.word	0xfef6ffff
 80010a8:	fffbffff 	.word	0xfffbffff
 80010ac:	ffc0ffff 	.word	0xffc0ffff
 80010b0:	fffffeac 	.word	0xfffffeac

080010b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010b4:	480d      	ldr	r0, [pc, #52]	; (80010ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010b6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b8:	480d      	ldr	r0, [pc, #52]	; (80010f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80010ba:	490e      	ldr	r1, [pc, #56]	; (80010f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010bc:	4a0e      	ldr	r2, [pc, #56]	; (80010f8 <LoopForever+0xe>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c0:	e002      	b.n	80010c8 <LoopCopyDataInit>

080010c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c6:	3304      	adds	r3, #4

080010c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010cc:	d3f9      	bcc.n	80010c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ce:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80010d0:	4c0b      	ldr	r4, [pc, #44]	; (8001100 <LoopForever+0x16>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d4:	e001      	b.n	80010da <LoopFillZerobss>

080010d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d8:	3204      	adds	r2, #4

080010da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010dc:	d3fb      	bcc.n	80010d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80010de:	f7ff ffb9 	bl	8001054 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80010e2:	f000 f811 	bl	8001108 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010e6:	f7ff fef1 	bl	8000ecc <main>

080010ea <LoopForever>:

LoopForever:
    b LoopForever
 80010ea:	e7fe      	b.n	80010ea <LoopForever>
  ldr   r0, =_estack
 80010ec:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80010f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80010f8:	080011b4 	.word	0x080011b4
  ldr r2, =_sbss
 80010fc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001100:	20000064 	.word	0x20000064

08001104 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001104:	e7fe      	b.n	8001104 <ADC1_COMP_IRQHandler>
	...

08001108 <__libc_init_array>:
 8001108:	b570      	push	{r4, r5, r6, lr}
 800110a:	2600      	movs	r6, #0
 800110c:	4d0c      	ldr	r5, [pc, #48]	; (8001140 <__libc_init_array+0x38>)
 800110e:	4c0d      	ldr	r4, [pc, #52]	; (8001144 <__libc_init_array+0x3c>)
 8001110:	1b64      	subs	r4, r4, r5
 8001112:	10a4      	asrs	r4, r4, #2
 8001114:	42a6      	cmp	r6, r4
 8001116:	d109      	bne.n	800112c <__libc_init_array+0x24>
 8001118:	2600      	movs	r6, #0
 800111a:	f000 f823 	bl	8001164 <_init>
 800111e:	4d0a      	ldr	r5, [pc, #40]	; (8001148 <__libc_init_array+0x40>)
 8001120:	4c0a      	ldr	r4, [pc, #40]	; (800114c <__libc_init_array+0x44>)
 8001122:	1b64      	subs	r4, r4, r5
 8001124:	10a4      	asrs	r4, r4, #2
 8001126:	42a6      	cmp	r6, r4
 8001128:	d105      	bne.n	8001136 <__libc_init_array+0x2e>
 800112a:	bd70      	pop	{r4, r5, r6, pc}
 800112c:	00b3      	lsls	r3, r6, #2
 800112e:	58eb      	ldr	r3, [r5, r3]
 8001130:	4798      	blx	r3
 8001132:	3601      	adds	r6, #1
 8001134:	e7ee      	b.n	8001114 <__libc_init_array+0xc>
 8001136:	00b3      	lsls	r3, r6, #2
 8001138:	58eb      	ldr	r3, [r5, r3]
 800113a:	4798      	blx	r3
 800113c:	3601      	adds	r6, #1
 800113e:	e7f2      	b.n	8001126 <__libc_init_array+0x1e>
 8001140:	080011ac 	.word	0x080011ac
 8001144:	080011ac 	.word	0x080011ac
 8001148:	080011ac 	.word	0x080011ac
 800114c:	080011b0 	.word	0x080011b0

08001150 <memcpy>:
 8001150:	2300      	movs	r3, #0
 8001152:	b510      	push	{r4, lr}
 8001154:	429a      	cmp	r2, r3
 8001156:	d100      	bne.n	800115a <memcpy+0xa>
 8001158:	bd10      	pop	{r4, pc}
 800115a:	5ccc      	ldrb	r4, [r1, r3]
 800115c:	54c4      	strb	r4, [r0, r3]
 800115e:	3301      	adds	r3, #1
 8001160:	e7f8      	b.n	8001154 <memcpy+0x4>
	...

08001164 <_init>:
 8001164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800116a:	bc08      	pop	{r3}
 800116c:	469e      	mov	lr, r3
 800116e:	4770      	bx	lr

08001170 <_fini>:
 8001170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001176:	bc08      	pop	{r3}
 8001178:	469e      	mov	lr, r3
 800117a:	4770      	bx	lr
